#include <stdio.h>
#include<stdlib.h>

struct node 
{
    int data;
    struct node *next;
};


void traversal(struct node *ptr)
{
    printf("%d \t",ptr->data);
    struct node *temp;
    temp = ptr->next;
    while(temp != ptr)
    {
        printf("%d\t",temp->data);
        temp = temp->next;
    }
    
}

struct node *insertion_start(struct node *head,struct node *tail)
{
    struct node *temp;
    printf("enter new element to insert at beginning \n");
    temp = (struct node *) malloc(sizeof(struct node));
    scanf("%d",&temp->data);
    
    temp->next = head;
    head = temp;
    tail->next = head;
    
    return head;
    
}

struct node *insertion_middle(struct node *head)
{
    struct node *temp,*temp1;
    int i,index;
    temp = head;
    printf("enter new element to insert \n");
    temp1 = (struct node *) malloc(sizeof(struct node));
    scanf("%d",&temp1->data);
    
    printf("enter position to insert element \n");
    scanf("%d",&index);
    for (i=1;i<index-1;i++)
    {
        temp = temp->next;
    }
    temp1->next = temp->next;
    temp->next = temp1;
    
    return head;
    
}

struct node *insertion_end(struct node *head,struct node *tail)
{
    struct node *temp;
    printf("enter new element to insert at end \n");
    temp = (struct node *) malloc(sizeof(struct node));
    scanf("%d",&temp->data);
    
    tail->next = temp;
    tail = temp;
    tail->next = head;
    
    return head;
    
}




int main()
{
    int choice=1;
    struct node *head,*tail,*newnode;
    head=NULL;
    
    while(choice == 1)
    {
        printf("enter new element\n");
        newnode = (struct node *) malloc(sizeof(struct node));
        scanf("%d",&newnode->data);
        //newnode->next = head;
        
        if (head == NULL)
        {
            head = newnode;
            tail = newnode;
        }
        
        else
        {
            tail->next = newnode;
            tail = newnode;
        }
        
        printf("enter 1 to add another element or enter 0 to stop \n");
        scanf("%d",&choice);
        
    }
    
    tail->next = head;
    
    traversal(head);
    
    //head = insertion_start(head,tail);
    
   // tail = insertion_end(head,tail);
    head = insertion_middle(head);
    traversal(head);
    return 0;
}
